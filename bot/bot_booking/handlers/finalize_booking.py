from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiohttp import ClientSession
from ..config import logger, DJANGO_API_BASE_URL

router = Router()

@router.callback_query(lambda c: c.data == "finalize_booking")
async def finalize_booking(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
        state_data = await state.get_data()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
        if state_data.get("booking_finalized"):
            await callback_query.answer("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.", show_alert=True)
            logger.info("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return

        user_data = state_data
        logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π: {user_data}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        required_keys = [
            "start_year", "start_month", "start_day", "start_hour", "start_minute",
            "end_hour", "end_minute", "event_end_date",
            "guests_count", "selected_hall", "preferences",
            "name", "phone", "call_time", "messenger", "promo_code"
        ]
        missing_keys = [key for key in required_keys if key not in user_data or not user_data[key]]

        if missing_keys:
            logger.error(f"–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {missing_keys}")
            await callback_query.answer(
                f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–∞–Ω–Ω—ã–º–∏. –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {', '.join(missing_keys)}.",
                show_alert=True
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–≤–æ–Ω–∫–∞ (call_time)
        call_time = user_data.get("call_time", None)
        if ":" not in call_time:
            call_time = f"{call_time}:00:00"  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601
        event_start_date = (
            f"{user_data['start_year']}-"
            f"{int(user_data['start_month']):02}-"
            f"{int(user_data['start_day']):02}T"
            f"{int(user_data['start_hour']):02}:{int(user_data['start_minute']):02}:00Z"
        )
        from datetime import datetime
        event_end_date = datetime(
            year=int(user_data["start_year"]),
            month=int(user_data["start_month"]),
            day=int(user_data["start_day"]),
            hour=int(user_data["end_hour"]),
            minute=int(user_data["end_minute"])
        ).isoformat(timespec="seconds") + "Z"

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ JSON –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        booking_data = {
            "event_start_date": event_start_date,
            "event_end_date": event_end_date,
            "space": user_data["selected_hall"]["id"],
            "preferences": [pref["id"] for pref in user_data.get("preferences", [])],
            "client_name": user_data["name"],
            "client_contact": user_data["phone"],
            "call_time": call_time,
            "guests_count": user_data["guests_count"],
            "messenger": user_data.get("messenger", "–Ω–µ —É–∫–∞–∑–∞–Ω"),
            "promo_code": user_data.get("promo_code", None)
        }

        logger.info(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {booking_data}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        async with ClientSession() as session:
            async with session.post(f"{DJANGO_API_BASE_URL}create-booking/", json=booking_data) as response:
                if response.status == 201:
                    logger.info("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
                    await callback_query.answer("üéâ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –º—ã –í–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º!", show_alert=True)
                    await state.update_data(booking_finalized=True)  # –§–∏–∫—Å–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                else:
                    error_text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status}. –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {error_text}")
                    await callback_query.answer(
                        f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: {response.status}. –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {error_text}",
                        show_alert=True
                    )
                    return

    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", show_alert=True)
