from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiohttp import ClientSession
from datetime import datetime
from ..config import logger, DJANGO_API_BASE_URL

router = Router()

@router.callback_query(lambda c: c.data == "finalize_booking")
async def finalize_booking(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä.
    """
    try:
        state_data = await state.get_data()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
        if state_data.get("booking_finalized"):
            await callback_query.answer("‚úÖ –ó–∞—è–≤–∫–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.", show_alert=True)
            logger.info("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return

        user_data = state_data
        logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π: {user_data}")

        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ messengers ---
        messenger_mapping = {
            "viber": 1,
            "telegram": 2,
            "whatsapp": 3
        }

        messenger_value = user_data.get("messenger")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ messenger —Å—Ç—Ä–æ–∫–æ–π –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º `.lower()`
        if isinstance(messenger_value, str):
            messenger_value = messenger_value.lower()

        user_data["messenger"] = messenger_mapping.get(messenger_value, 0)

        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π messenger: {user_data['messenger']}")

        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ call_time ---
        call_time = user_data.get("call_time")

        # –ï—Å–ª–∏ call_time –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        if not call_time or not isinstance(call_time, str) or ":" not in call_time:
            call_time = "10:00"

        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π call_time: {call_time}")

        # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ ISO 8601 –¥–∞—Ç ---
        event_start_date = datetime(
            int(user_data["start_year"]), int(user_data["start_month"]), int(user_data["start_day"]),
            int(user_data["start_hour"]), int(user_data["start_minute"])
        ).isoformat(timespec="seconds") + "Z"

        event_end_date = datetime(
            int(user_data["start_year"]), int(user_data["start_month"]), int(user_data["start_day"]),
            int(user_data["end_hour"]), int(user_data["end_minute"])
        ).isoformat(timespec="seconds") + "Z"

        # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ JSON –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä ---
        booking_data = {
            "event_start_date": event_start_date,
            "event_end_date": event_end_date,
            "space": user_data["selected_hall"]["id"],
            "preferences": [pref["id"] for pref in user_data.get("preferences", [])],
            "client_name": user_data["name"],
            "client_contact": user_data["phone"],
            "call_time": call_time,
            "guests_count": user_data["guests_count"],
            "messenger": user_data["messenger"],
            "promo_code": user_data.get("promo_code", None)
        }

        logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π: {booking_data}")

        # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä ---
        async with ClientSession() as session:
            async with session.post(f"{DJANGO_API_BASE_URL}create-booking/", json=booking_data) as response:
                if response.status == 201:
                    await callback_query.answer("üéâ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!", show_alert=True)
                    await state.update_data(booking_finalized=True)
                    logger.info("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ.")
                else:
                    error_text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {error_text}")
                    await callback_query.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {error_text}", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.", show_alert=True)
