from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from ..keyboards import create_month_keyboard, create_year_keyboard, create_hour_keyboard, create_minute_keyboard, create_calendar
from ..config import logger


router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–∞—á–∞–ª–∞
@router.callback_query(lambda c: c.data.startswith("start_day:"))
async def process_start_day(callback_query: types.CallbackQuery, state: FSMContext):
    day = callback_query.data.split(":")[1]
    logger.info(f"–í—ã–±—Ä–∞–Ω –¥–µ–Ω—å –Ω–∞—á–∞–ª–∞: {day}")
    await state.update_data(start_day=day)
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: üóìÔ∏è", reply_markup=create_month_keyboard("start"))
    await state.set_state("select_start_month")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –Ω–∞—á–∞–ª–∞
@router.callback_query(lambda c: c.data.startswith("start_month:"))
async def process_start_month(callback_query: types.CallbackQuery, state: FSMContext):
    month = callback_query.data.split(":")[1]
    logger.info(f"–í—ã–±—Ä–∞–Ω –º–µ—Å—è—Ü –Ω–∞—á–∞–ª–∞: {month}")
    await state.update_data(start_month=month)
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: üóìÔ∏è", reply_markup=create_year_keyboard("start"))
    await state.set_state("select_start_year")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞ –Ω–∞—á–∞–ª–∞
@router.callback_query(lambda c: c.data.startswith("start_year:"))
async def process_start_year(callback_query: types.CallbackQuery, state: FSMContext):
    year = callback_query.data.split(":")[1]
    logger.info(f"–í—ã–±—Ä–∞–Ω –≥–æ–¥ –Ω–∞—á–∞–ª–∞: {year}")
    await state.update_data(start_year=year)
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=create_hour_keyboard("start"))
    await state.set_state("select_start_hour")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∞—Å–∞ –Ω–∞—á–∞–ª–∞
@router.callback_query(lambda c: c.data.startswith("start_hour:"))
async def process_start_hour(callback_query: types.CallbackQuery, state: FSMContext):
    hour = callback_query.data.split(":")[1]
    logger.info(f"–í—ã–±—Ä–∞–Ω —á–∞—Å –Ω–∞—á–∞–ª–∞: {hour}")
    await state.update_data(start_hour=hour)
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=create_minute_keyboard("start"))
    await state.set_state("select_start_minute")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∏–Ω—É—Ç—ã –Ω–∞—á–∞–ª–∞
@router.callback_query(lambda c: c.data.startswith("start_minute:"))
async def process_start_minute(callback_query: types.CallbackQuery, state: FSMContext):
    minute = callback_query.data.split(":")[1]
    logger.info(f"–í—ã–±—Ä–∞–Ω—ã –º–∏–Ω—É—Ç—ã –Ω–∞—á–∞–ª–∞: {minute}")
    await state.update_data(start_minute=minute)
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=create_calendar("end"))
    await state.set_state("select_end_day")
