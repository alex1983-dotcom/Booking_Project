from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiohttp import ClientSession
from ..config import logger, DJANGO_API_BASE_URL
from aiogram.filters import StateFilter
from ..keyboards import create_halls_keyboard

router = Router()

@router.message(StateFilter("enter_guests"))
async def process_guests_input(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ—Å—Ç–µ–π –∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ª–æ–≤.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ—Å—Ç–µ–π
        guests_count = int(message.text.strip())
        if guests_count <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
    except ValueError:
        await message.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –≤ FSM
    await state.update_data(guests_count=guests_count)
    user_data = await state.get_data()
    logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    start_datetime = f"{user_data['start_year']}-{int(user_data['start_month']):02}-{int(user_data['start_day']):02} {int(user_data['start_hour']):02}:{int(user_data['start_minute']):02}"
    end_datetime = f"{user_data['start_year']}-{int(user_data['start_month']):02}-{int(user_data['start_day']):02} {int(user_data['end_hour']):02}:{int(user_data['end_minute']):02}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ª–æ–≤
    async with ClientSession() as session:
        try:
            response = await session.get(
                f"{DJANGO_API_BASE_URL}check-availability/",
                params={
                    "start": start_datetime,
                    "end": end_datetime,
                    "guests": guests_count
                }
            )

            if response.status == 200:
                response_data = await response.json()
                halls = response_data.get("data", {}).get("spaces", [])
                logger.info(f"–ù–∞–π–¥–µ–Ω—ã –∑–∞–ª—ã: {halls}")

                if halls:
                    await message.reply(
                        "üè¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ª—ã –Ω–∞–π–¥–µ–Ω—ã! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö:",
                        reply_markup=create_halls_keyboard(halls)
                    )
                    await state.set_state("hall_selection")
                else:
                    logger.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ª–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")
                    await message.reply("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ª–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
            else:
                response_text = await response.text()
                logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: —Å—Ç–∞—Ç—É—Å {response.status}. –û—Ç–≤–µ—Ç: {response_text}")
                await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {str(e)}")
