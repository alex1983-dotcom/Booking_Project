from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiohttp import ClientSession
from aiogram.filters import Command, StateFilter
from .keyboards import (
    create_calendar,
    create_month_keyboard,
    create_year_keyboard,
    create_hour_keyboard,
    create_minute_keyboard,
    create_halls_keyboard,
    create_preferences_keyboard,
    create_feedback_keyboard
)
from .config import logger, DJANGO_API_BASE_URL

# –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä
router = Router()

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===

@router.message(Command(commands=['start']))
async def start_booking(message: types.Message, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞.")

    greeting = (
        "üëã –ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç Innodom! ü§ñ\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ª –¥–ª—è –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "- üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.\n"
        "- üè¢ –ù–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π –∑–∞–ª.\n"
        "- ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.\n\n"
        "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º!"
    )

    await message.reply(greeting)

    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: üóìÔ∏è", reply_markup=create_calendar("start"))
    await state.set_state("select_start_day")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@router.callback_query(lambda c: c.data.startswith("start_day:"))
async def process_start_day(callback_query: types.CallbackQuery, state: FSMContext):
    day = callback_query.data.split(":")[1]
    logger.info(f"–í—ã–±—Ä–∞–Ω –¥–µ–Ω—å –Ω–∞—á–∞–ª–∞: {day}")
    await state.update_data(start_day=day)
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: üóìÔ∏è", reply_markup=create_month_keyboard("start"))
    await state.set_state("select_start_month")


@router.callback_query(lambda c: c.data.startswith("start_month:"))
async def process_start_month(callback_query: types.CallbackQuery, state: FSMContext):
    month = callback_query.data.split(":")[1]
    logger.info(f"–í—ã–±—Ä–∞–Ω –º–µ—Å—è—Ü –Ω–∞—á–∞–ª–∞: {month}")
    await state.update_data(start_month=month)
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: üóìÔ∏è", reply_markup=create_year_keyboard("start"))
    await state.set_state("select_start_year")


@router.callback_query(lambda c: c.data.startswith("start_year:"))
async def process_start_year(callback_query: types.CallbackQuery, state: FSMContext):
    year = callback_query.data.split(":")[1]
    logger.info(f"–í—ã–±—Ä–∞–Ω –≥–æ–¥ –Ω–∞—á–∞–ª–∞: {year}")
    await state.update_data(start_year=year)
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=create_hour_keyboard("start"))
    await state.set_state("select_start_hour")


@router.callback_query(lambda c: c.data.startswith("start_hour:"))
async def process_start_hour(callback_query: types.CallbackQuery, state: FSMContext):
    hour = callback_query.data.split(":")[1]
    logger.info(f"–í—ã–±—Ä–∞–Ω —á–∞—Å –Ω–∞—á–∞–ª–∞: {hour}")
    await state.update_data(start_hour=hour)
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=create_minute_keyboard("start"))
    await state.set_state("select_start_minute")


@router.callback_query(lambda c: c.data.startswith("start_minute:"))
async def process_start_minute(callback_query: types.CallbackQuery, state: FSMContext):
    minute = callback_query.data.split(":")[1]
    logger.info(f"–í—ã–±—Ä–∞–Ω—ã –º–∏–Ω—É—Ç—ã –Ω–∞—á–∞–ª–∞: {minute}")
    await state.update_data(start_minute=minute)
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=create_calendar("end"))
    await state.set_state("select_end_day")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
@router.callback_query(lambda c: c.data.startswith("end_day:"))
async def process_end_day(callback_query: types.CallbackQuery, state: FSMContext):
    day = callback_query.data.split(":")[1]
    logger.info(f"–í—ã–±—Ä–∞–Ω –¥–µ–Ω—å –æ–∫–æ–Ω—á–∞–Ω–∏—è: {day}")
    await state.update_data(end_day=day)
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=create_month_keyboard("end"))
    await state.set_state("select_end_month")


@router.callback_query(lambda c: c.data.startswith("end_month:"))
async def process_end_month(callback_query: types.CallbackQuery, state: FSMContext):
    month = callback_query.data.split(":")[1]
    logger.info(f"–í—ã–±—Ä–∞–Ω –º–µ—Å—è—Ü –æ–∫–æ–Ω—á–∞–Ω–∏—è: {month}")
    await state.update_data(end_month=month)
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=create_year_keyboard("end"))
    await state.set_state("select_end_year")


@router.callback_query(lambda c: c.data.startswith("end_year:"))
async def process_end_year(callback_query: types.CallbackQuery, state: FSMContext):
    year = callback_query.data.split(":")[1]
    logger.info(f"–í—ã–±—Ä–∞–Ω –≥–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {year}")
    await state.update_data(end_year=year)
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=create_hour_keyboard("end"))
    await state.set_state("select_end_hour")


@router.callback_query(lambda c: c.data.startswith("end_hour:"))
async def process_end_hour(callback_query: types.CallbackQuery, state: FSMContext):
    hour = callback_query.data.split(":")[1]
    logger.info(f"–í—ã–±—Ä–∞–Ω —á–∞—Å –æ–∫–æ–Ω—á–∞–Ω–∏—è: {hour}")
    await state.update_data(end_hour=hour)
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=create_minute_keyboard("end"))
    await state.set_state("select_end_minute")


@router.callback_query(lambda c: c.data.startswith("end_minute:"))
async def process_end_minute(callback_query: types.CallbackQuery, state: FSMContext):
    minute = callback_query.data.split(":")[1]
    logger.info(f"–í—ã–±—Ä–∞–Ω—ã –º–∏–Ω—É—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è: {minute}")
    await state.update_data(end_minute=minute)
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:")
    await state.set_state("enter_guests")



# =======================–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ—Å—Ç–µ–π====================
@router.message(StateFilter("enter_guests"))
async def process_guests_input(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ—Å—Ç–µ–π, –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ª–æ–≤.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ—Å—Ç–µ–π
        guests_count = int(message.text.strip())
        if guests_count <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
    except ValueError:
        await message.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(guests_count=guests_count)
    user_data = await state.get_data()

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ä–µ–º–µ–Ω–∏
        start_hour = int(user_data.get("start_hour", 0))
        end_hour = int(user_data.get("end_hour", 0))
        start_minute = int(user_data.get("start_minute", 0))
        end_minute = int(user_data.get("end_minute", 0))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
        if not (0 <= start_hour <= 23 and 0 <= end_hour <= 23 and 0 <= start_minute <= 59 and 0 <= end_minute <= 59):
            await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-23, –∞ –º–∏–Ω—É—Ç—ã ‚Äî –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-59. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        start_datetime = f"{user_data['start_year']}-{user_data['start_month']:02}-{user_data['start_day']:02} {start_hour:02}:{start_minute:02}"
        end_datetime = f"{user_data['end_year']}-{user_data['end_month']:02}-{user_data['end_day']:02} {end_hour:02}:{end_minute:02}"
    except KeyError as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤—Ä–µ–º–µ–Ω–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {e}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ —Å /start.")
        return

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: start={start_datetime}, end={end_datetime}, guests={guests_count}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
    async with ClientSession() as session:
        try:
            response = await session.get(f"{DJANGO_API_BASE_URL}check-availability/", params={
                "start": start_datetime,
                "end": end_datetime,
                "guests": guests_count
            })

            if response.status == 200:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
                response_data = await response.json()
                halls = response_data.get("spaces", [])
                if halls:
                    await message.reply("üè¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ª—ã –Ω–∞–π–¥–µ–Ω—ã! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö:", reply_markup=create_halls_keyboard(halls))
                    await state.set_state("hall_selection")
                else:
                    await message.reply("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ª–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
            elif response.status == 400:
                await message.reply("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                logger.warning(f"400 Bad Request. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: start={start_datetime}, end={end_datetime}, guests={guests_count}")
            else:
                await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: —Å—Ç–∞—Ç—É—Å {response.status}. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: start={start_datetime}, end={end_datetime}, guests={guests_count}")
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")

#=========================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–ª–∞==========================
@router.callback_query(lambda c: c.data.startswith("hall:"))
async def process_hall_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–ª–∞.
    """
    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–ª–∞ –∏–∑ callback_data
        hall_id = callback_query.data.split(":")[1]
        await state.update_data(selected_hall=hall_id)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö (–º–æ–≥—É—Ç –±—ã—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∑–∞—Ä–∞–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã)
        preferences = ["Wi-Fi", "–ü—Ä–æ–µ–∫—Ç–æ—Ä", "–ú–∏–∫—Ä–æ—Ñ–æ–Ω—ã", "–ö–æ—Ñ–µ-–±—Ä–µ–π–∫"]  # –ü—Ä–∏–º–µ—Ä —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
        if not isinstance(preferences, list):
            raise ValueError("–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º.")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –≤—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:",
            reply_markup=create_preferences_keyboard(preferences)
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state("preferences_selection")

    except ValueError as ve:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
        await callback_query.message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(ve)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
        logger.error(f"–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {str(ve)}")
    except IndexError:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ callback_data
        await callback_query.message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data.")
        logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data. –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç 'hall:<id>'.")
    except Exception as e:
        # –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        await callback_query.message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ process_hall_selection: {str(e)}")



#======================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π=======================
@router.callback_query(lambda c: c.data.startswith("preference:"))
async def process_preferences_selection(callback_query: types.CallbackQuery, state: FSMContext):
    preference_id = callback_query.data.split(":")[1]
    user_data = await state.get_data()

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫
    preferences = user_data.get("preferences", [])
    preferences.append(preference_id)
    await state.update_data(preferences=preferences)

    await callback_query.answer("–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –µ—â—ë –æ–¥–Ω–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤—ã–±–æ—Ä.", reply_markup=create_preferences_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
@router.message(StateFilter("preferences_selection"))
async def finalize_booking(message: types.Message, state: FSMContext):
    """
    –°–±–æ—Ä –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    user_data = await state.get_data()

    async with ClientSession() as session:
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            response = await session.post(f"{DJANGO_API_BASE_URL}create-booking/", json=user_data)
            
            if response.status == 201:
                # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                await message.reply("üéâ –í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
                logger.info("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
            else:
                # –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: —Å—Ç–∞—Ç—É—Å {response.status}")
                await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

        except Exception as e:
            # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {e}")
            await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()
